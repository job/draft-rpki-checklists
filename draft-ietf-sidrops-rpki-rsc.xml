<?xml version='1.0' encoding='utf-8'?>

<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     category="std"
     docName="draft-ietf-sidrops-rpki-rsc-11"
     ipr="trust200902"
     xml:lang="en"
     sortRefs="true"
     submissionType="IETF"
     consensus="true"
     version="3">

  <front>

    <title abbrev="RPKI Signed Checklists">
      A profile for Resource Public Key Infrastructure (RPKI) Signed Checklists (RSC)
    </title>

    <seriesInfo name="Internet-Draft" value="draft-ietf-sidrops-rpki-rsc-09"/>

    <author fullname="Job Snijders" initials="J." surname="Snijders">
      <organization>Fastly</organization>
      <address>
        <postal>
          <street/>
          <code/>
          <city>Amsterdam</city>
          <country>Netherlands</country>
        </postal>
        <email>job@fastly.com</email>
      </address>
    </author>

    <author fullname="Tom Harrison" initials="T." surname="Harrison">
      <organization abbrev="APNIC">Asia Pacific Network Information Centre</organization>
      <address>
        <postal>
          <street>6 Cordelia St</street>
          <city>South Brisbane</city>
          <code>4101</code>
          <country>Australia</country>
          <region>QLD</region>
        </postal>
        <phone/>
        <email>tomh@apnic.net</email>
      </address>
    </author>

    <author fullname="Ben Maddison" initials="B." surname="Maddison">
      <organization abbrev="Workonline">Workonline Communications</organization>
      <address>
        <postal>
          <street/>
          <city>Cape Town</city>
          <code/>
          <country>South Africa</country>
        </postal>
        <email>benm@workonline.africa</email>
      </address>
    </author>

    <abstract>
      <t>
         This document defines a Cryptographic Message Syntax (CMS) protected content type for use with the Resource Public Key Infrastructure (RPKI) to carry a general purpose listing of checksums (a 'checklist').
         The objective is to allow an attestation, termed an RPKI Signed Checklist (RSC), which contains one or more checksums of arbitrary digital objects (files) that are signed "with resources", and which, when validated, confirms that the respective Internet Resource Holder produced the RSC.
      </t>
    </abstract>

    <note>
      <name>Requirements Language</name>
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
        capitals, as shown here.
      </t>
    </note>

  </front>

  <middle>

    <section anchor="intro">
      <name>Introduction</name>

      <t>
        This document defines a Cryptographic Message Syntax (CMS) <xref target="RFC5652"/> <xref target="RFC6268"/> protected content type for a general purpose listing of checksums (a 'checklist'), for use with the Resource Public Key Infrastructure (RPKI) <xref target="RFC6480"/>.
        The protected CMS content type is intended to provide for the creation and validation of an RPKI Signed Checklist (RSC): a checksum listing signed with a specific set of Internet Number Resources.
        The objective is to allow an attestation that, when validated, provides a means to confirm a given Internet Resource Holder produced the RPKI Signed Checklist (RSC).
      </t>

      <t>
        Signed Checklists are expected to facilitate inter-domain business use-cases which depend on an ability to verify resource holdership.
        RPKI-based validation processes are expected to become the industry norm for automated Bring Your Own IP (BYOIP) on-boarding or establishment of physical interconnection between Autonomous Systems.
      </t>

      <t>
        The RSC concept borrows heavily from <xref target="I-D.ietf-sidrops-rpki-rta">RTA</xref>, Manifests <xref target="RFC9286"/>, and OpenBSD's <xref target="signify"/> utility.
        The main difference between RSC and RTA is that the RTA profile allows multiple signers to attest a single digital object through a checksum of its content, while the RSC profile allows a single signer to attest the content of multiple digital objects.
        A single signer profile is considered a simplification for both implementers and operators.
      </t>

    </section>

    <section anchor="profile">
      <name>RSC Profile and Distribution</name>

      <t>
        RSC follows the Signed Object Template for the RPKI <xref target="RFC6488"/> with one exception: because RSCs MUST NOT be distributed through the global RPKI Repository system, the Subject Information Access (SIA) extension MUST be omitted from the RSC's X.509 End-Entity (EE) certificate.
      </t>

      <t>
        What constitutes suitable transport for RSC files is deliberately unspecified.
        For example, it might be a USB stick, a web interface secured with HTTPS, a PGP-signed email, a T-shirt printed with a QR code, or a carrier pigeon.
      </t>

      <section title="RSC End-Entity Certificates">
        <t>
          The Certification Authority (CA) MUST only sign one RSC with each End-Entity (EE) Certificate, and MUST generate a new key pair for each new RSC.
          This form of use of the associated EE Certificate is termed a "one-time-use" EE certificate <xref target="RFC6487" section="3"/>.
        </t>
      </section>

    </section>

    <section anchor="content">
      <name>The RSC ContentType</name>

      <t>
        The ContentType for an RSC is defined as rpkiSignedChecklist, with Object Identifier (OID) 1.2.840.113549.1.9.16.1.48.
      </t>

      <t>
        This OID MUST appear both within the eContentType in the encapContentInfo object as well as the ContentType signed attribute in the signerInfo object (see <xref target="RFC6488"/>).
      </t>

    </section>

    <section anchor="econtent">

      <name>The RSC eContent</name>
      <t>
        The content of an RSC indicates that a checklist for arbitrary digital objects has been signed "with resources".
        An RSC is formally defined as:
      </t>

      <sourcecode type="asn.1" src="RpkiSignedChecklist-2022.asn"/>

      <section>
        <name>version</name>
        <t>
          The version number of the RpkiSignedChecklist MUST be 0.
        </t>
      </section>

      <section>
        <name>resources</name>
        <t>
          The resources contained here are the resources used to mark the attestation, and MUST be a subset of the set of resources listed by the EE Certificate carried in the CMS certificates field.
        </t>
        <t>
          If the asID field is present, it MUST contain an instance of ConstrainedASIdentifiers.
        </t>
        <t>
          If the ipAddrBlocks field is present, it MUST contain an instance of ConstrainedIPAddrBlocks.
        </t>
        <t>
          At least one of asID or ipAddrBlocks MUST be present.
        </t>
        <t>
          Each of ConstrainedASIdentifiers and ConstrainedIPAddrBlocks are specified such that the resulting DER-encoded data instances are binary compatible with, respectively, ASIdentifiers and IPAddrBlocks defined in <xref target="RFC3779"/>.
        </t>
        <t>
          Implementations encountering decoding errors whilst attempting to read DER-encoded data using this specification should be aware of the possibility that the data may have been encoded using an implementation intended for use with <xref target="RFC3779"/>. Such data may contain elements prohibited by the current specification.
        </t>
        <t>
          Attempting to decode the errored data using the more permissive specification contained in <xref target="RFC3779"/> may enable implementors to gather additional context for use when reporting errors to the user.
        </t>
        <t>
          However, implementations MUST NOT ignore errors resulting from the more restrictive definitions contained herein: in particular, such errors MUST cause the validation procedure described in <xref target="validation"/> to fail.
        </t>

        <section>
          <name>ConstrainedASIdentifiers type</name>

          <t>
            ConstrainedASIdentifiers is a SEQUENCE, consisting of a single field "asnum", itself containing a SEQUENCE OF one or more ASIdOrRange instances as defined in <xref target="RFC3779"/>.
          </t>

          <t>
            ConstrainedASIdentifiers is defined such that the resulting DER-encoded data are binary compatible with ASIdentifiers defined in <xref target="RFC3779"/>.
          </t>

        </section>

        <section>
          <name>ConstrainedIPAddrBlocks type</name>

          <t>
            ConstrainedIPAddrBlocks is a SEQUENCE OF one or more instances of ConstrainedIPAddressFamily.
          </t>

          <t>
            There MUST be only one instance of ConstrainedIPAddressFamily per unique AFI.
          </t>

          <t>
            The elements of ConstrainedIPAddressFamily MUST be ordered by ascending addressFamily values (treating the octets as unsigned numbers).
            Thus, when both IPv4 and IPv6 addresses are specified, the IPv4 addresses MUST precede the IPv6 addresses (since the IPv4 AFI of 0001 is less than the IPv6 AFI of 0002).
          </t>

          <t>
            ConstrainedIPAddrBlocks is defined such that the resulting DER-encoded data are binary compatible with IPAddrBlocks defined in <xref target="RFC3779"/>.
          </t>

          <section>
            <name>ConstrainedIPAddressFamily type</name>

            <section>
              <name>addressFamily field</name>
              <t>
                The addressFamily field is an OCTET STRING containing a two-octet Address Family Identifier (AFI), in network byte order.
                Unlike <xref target="RFC3779">IPAddrBlocks</xref>, a third octet containing a Subsequent Address Family Identifier (SAFI) MUST NOT be present.
                AFIs are specified in the Address Family Numbers <xref target="IANA.ADDRESS-FAMILY-NUMBERS">registry</xref> maintained by IANA.
              </t>
            </section>

            <section>
              <name>addressesOrRanges field</name>
              <t>
                The addressesOrRanges element is a SEQUENCE OF one or more IPAddressOrRange values, as defined in <xref target="RFC3779"/>.
                The rules for canonicalization and encoding defined in <xref target="RFC3779" section="2.2.3.6"/> apply to the value of addressesOrRanges.
              </t>
            </section>
          </section>

        </section>
      </section>

      <section>
        <name>digestAlgorithm</name>
        <t>
          The digest algorithm used to create the message digest of the attested digital object(s).
          This algorithm MUST be a hashing algorithm defined in <xref target="RFC7935"/>.
        </t>
      </section>

      <section>
        <name>checkList</name>
        <t>
          This field is a SEQUENCE OF one or more FileNameAndHash values.
          There is one FileNameAndHash entry for each digital object referenced on the Signed Checklist.
        </t>

        <section anchor="FileNameAndHash">
          <name>FileNameAndHash</name>
          <t>
            Each FileNameAndHash is an ordered pair of the name of the directory entry containing the digital object, and the message digest of the digital object.
          </t>
          <t>
            The hash field is mandatory.
            The value of the hash field is the calculated message digest of the digital object.
            The hashing algorithm is specified in the digestAlgorithm field.
          </t>
          <t>
            The fileName field is OPTIONAL.
            This is to allow Signed Checklists to be used in a "stand-alone" fashion in which nameless digital objects are addressed directly through their respective message digest rather than through a file system abstraction.
          </t>
          <t>
            If the fileName field is present then its value:
          </t>
          <ul>
            <li>
              MUST contain only characters specified in the Portable Filename Character Set as defined in <xref target="POSIX"/>.
            </li>
            <li>
              MUST be unique with respect to the other FileNameAndHash elements of checkList for which the fileName field is also present.
            </li>
          </ul>
          <t>
            Conversely, if the fileName field is omitted, then the value of the hash field MUST be unique with respect to the other FileNameAndHash elements of checkList for which the fileName field is also omitted.
          </t>
        </section>
      </section>

    </section>

    <section anchor="validation">
      <name>RSC Validation</name>

      <t>
        Before a Relying Party can use an RSC to validate a set of digital objects, the Relying Party MUST first validate the RSC.
        To validate an RSC, the Relying Party MUST perform all the validation checks specified in <xref target="RFC6488"/> (except checking for the presence of an SIA extension, which MUST NOT be present in the EE X.509 certificate <xref target="RFC6487" section="4.8.8.2"/>), and perform the following additional RSC-specific validation steps:
      </t>

      <ol>
        <li>
          The contents of the CMS eContent field MUST conform to all of the constraints described in <xref target="econtent"/> including the constraints described in <xref target="FileNameAndHash"/>.
        </li>
        <li>
          If the asID field is present within the contents of the 'resources' field, then the AS Resources extension <xref target="RFC3779"/> MUST be present in the EE certificate contained in the CMS certificates field. The AS identifiers present in the eContent 'resources' field MUST be a subset of those present in the certificate extension. The EE certificate's AS Resources extension MUST NOT contain "inherit" elements.
        </li>
        <li>
          If the ipAddrBlocks field is present within the contents of the 'resources' field, then the IP Resources extension <xref target="RFC3779"/> MUST be present in the EE certificate contained in the CMS certificates field. The IP addresses present in the eContent 'resources' field MUST be a subset of those present in the certificate extension. The EE certificate's IP Resources extension MUST NOT contain "inherit" elements.
        </li>
      </ol>
    </section>

    <section>
      <name>Verifying files or data using RSC</name>

      <t>
        To verify a set of digital objects with an RSC:
      </t>

      <ul>
        <li>
          The RSC MUST be validated according to the procedure described in <xref target="validation"/>.
          If the RSC cannot be validated, verification MUST fail.
          This error SHOULD be reported to the user.
        </li>
        <li>
          <t>For every digital object to be verified:</t>
          <ol>
            <li anchor="mode">
              <t>
                If the verification procedure is provided with a file name for the object being verified (e.g. because the user has provided a file system path from which to read the object) then verification SHOULD proceed in "filename-aware" mode. Otherwise, verification SHOULD proceed in "filename-unaware" mode.
              </t>
              <t>
                Implementations MAY provide an option to override the verification mode, for example to ignore the fact that the object is to be read from a file.
              </t>
            </li>
            <li anchor="hash">
              <t>
                The message digest MUST be computed from the file contents or data using the digest algorithm specified in the digestAlgorithm field of the RSC.
              </t>
            </li>
            <li anchor="match_hash">
              <t>
                The digest computed in step <xref target="hash" format="counter"/> MUST be compared to the value appearing in the hash field of all FileNameAndHash elements of the checkList field of the RSC.
              </t>
              <t>
                One or more FileNameAndHash elements MUST be found with a matching hash value, otherwise verification MUST fail and the error SHOULD be reported to the user.
              </t>
            </li>
            <li>
              <t>
                If the mode selected in step <xref target="mode" format="counter"/> is "filename-aware" then exactly one of the FileNameAndHash elements matched in step <xref target="match_hash" format="counter"/> MUST contain a fileName field value exactly matching the file name of the object being verified.
              </t>
              <t>
                Alternatively, if the mode selected in step <xref target="mode" format="counter"/> is "filename-unaware" then exactly one of the FileNameAndHash elements matched in step <xref target="match_hash" format="counter"/> MUST have the fileName field omitted.
              </t>
              <t>
                Otherwise, verification MUST fail, and the error SHOULD be reported to the user.
              </t>
            </li>
          </ol>
        </li>
      </ul>

      <t>
        Note that in the above procedure, not all elements of checkList necessarily need be used. That is, it is not an error if the length of checkList is greater than the size of the set of digital objects to be verified. However, in this situation, implementations SHOULD issue a warning to the user, allowing for corrective action to be taken if necessary.
      </t>

    </section>

    <section>
      <name>Operational Considerations</name>

      <t>
        When creating digital objects of a plain-text nature (such as ASCII, UTF-8, HTML, Javascript, XML, etc.) converting such objects into a lossless compressed form is RECOMMENDED.
        Distributing plain-text objects within a compression envelope (such as <xref target="RFC1952">GZIP</xref>) might help avoid unexpected canonicalization at intermediate systems (which in turn would lead to checksum verification errors).
        Validator implementations are expected to treat a checksummed digital object as string of arbitrary single octets.
      </t>

      <t>
        If a fileName field is present, but no digital object within the set of to-be-verified digital objects has a filename that matches the content of that field, a validator implementation SHOULD compare the message digest of each digital object to the value from the hash field of the associated FileNameAndHash and report matches to the user for further consideration; or report an error indicating no file by that name exists.
      </t>

    </section>

    <section anchor="security">
      <name>Security Considerations</name>

      <t>
        Relying parties are hereby warned that the data in a RPKI Signed Checklist is self-asserted.
        When determining the meaning of any data contained in an RPKI Signed Checklist, Relying Parties MUST NOT make any assumptions about the signer beyond the fact that it had sufficient control of the issuing CA to create the object.
        These data have not been verified by the Certificate Authority (CA) that issued the CA certificate to the entity that issued the EE Certificate used to validate the Signed Checklist.
      </t>

      <t>
        RPKI Certificates are not bound to real world identities, see <xref target="RFC9255"/> for an elaboration.
        Relying Parties can only associate real world entities to Internet Number Resources by additionally consulting an exogenous authority.
        Signed Checklists are a tool to communicate assertions 'signed with Internet Number Resources', not about any other aspect of the resource holder's business operations such as the identity of the resource holder itself.
      </t>

      <t>
        RSC objects are not distributed through the RPKI Repository system.
        From this, it follows that third parties who do not have a copy of a given RSC, may not be aware of the existence of that RSC.
        Since RSC objects use EE Certificates, but all other currently defined types of RPKI object profiles are published in public CA repositories, an observer may infer from discrepancies in the Repository that RSC object(s) may exist.
        For example, if a CA does not use random serial numbers for Certificates, an observer could detect gaps between the serial numbers of the published EE Certificates.
        Similarly, if the CA includes a serial number on a CRL that does not match any published object, an observer could postulate an RSC EE Certificate was revoked.
      </t>
      <t>
        Conversely, a gap in serial numbers does not imply that an RSC exists.
        Nor does an arbitrary (to the RP unknown) serial in a CRL imply an RSC object exists: the implicitly referenced object might not be an RSC, it might have never been published, or was revoked before it was visible to RPs.
        In general, it is not possible to confidently infer the existence or non-existence of RSCs from the Repository state without access to a given RSC.
      </t>
      <t>
        While a one-time-use EE Certificate must only be used to generate and sign a single RSC object, CAs technically are not restricted from generating and signing multiple different RSC objects with a single keypair.
        Any RSC objects sharing the same EE Certificate can not be revoked individually.
      </t>

    </section>

    <section removeInRFC="true">
      <name>Implementation status</name>

      <t>
        This section records the status of known implementations of the protocol defined by this specification at the time of posting of this Internet-Draft, and is based on a proposal described in RFC 7942.
        The description of implementations in this section is intended to assist the IETF in its decision processes in progressing drafts to RFCs.
        Please note that the listing of any individual implementation here does not imply endorsement by the IETF.
        Furthermore, no effort has been spent to verify the information presented here that was supplied by IETF contributors.
        This is not intended as, and must not be construed to be, a catalog of available implementations or their features.
        Readers are advised to note that other implementations may exist.
      </t>

      <t>
        According to RFC 7942, "this will allow reviewers and working groups to assign due consideration to documents that have the benefit of running code, which may serve as evidence of valuable experimentation and feedback that have made the implemented protocols more mature.
        It is up to the individual working groups to use this information as they see fit".
      </t>

      <ul>
        <li>
          A signer and validator implementation <xref target="rpki-rsc-demo"/> written in Perl based on OpenSSL was provided by Tom Harrison from APNIC.
        </li>
        <li>
          A signer implementation <xref target="rpkimancer"/> written in Python was developed by Ben Maddison.
        </li>
        <li>
          Example .sig files were created by Job Snijders with the use of OpenSSL.
        </li>
        <li>
          A validator implementation based on OpenBSD rpki-client and LibreSSL was developed by Job Snijders.
        </li>
        <li>
          A validator implementation <xref target="FORT"/> based on the FORT validator was developed by Alberto Leiva for a previous version of this specification.
        </li>
        <li>
          A validator implementation <xref target="prover"/> was developed by Mikhail Puzanov.
        </li>
      </ul>

    </section>

    <section anchor="iana">
      <name>IANA Considerations</name>

      <section>
        <name>SMI Security for S/MIME CMS Content Type (1.2.840.113549.1.9.16.1)</name>
        <t>
          The IANA has allocated for this document in the "SMI Security for S/MIME CMS Content Type (1.2.840.113549.1.9.16.1)" registry:
        </t>
        <artwork>
<![CDATA[
Decimal   Description             References
---------------------------------------------------------------
  48      id-ct-signedChecklist   [draft-ietf-sidrops-rpki-rsc]
]]>
        </artwork>
        <t>
          Upon publication of this document, IANA is requested to reference the RFC publication instead of this draft.
        </t>
      </section>

      <section>
        <name>RPKI Signed Objects sub-registry</name>
        <t>
          The IANA is requested to register the OID for the RPKI Signed Checklist in the "RPKI Signed Objects" registry created by <xref target="RFC6488"/> as follows:
        </t>
        <artwork>
<![CDATA[
Name              OID                         Specification
-------------------------------------------------------------
Signed Checklist  1.2.840.113549.1.9.16.1.48  [RFC-TBD]
]]>
        </artwork>
      </section>

      <section>
        <name>File Extension</name>
        <t>
          The IANA has temporarily added an item for the Signed Checklist file extension to the "RPKI Repository Name Schemes" registry created by <xref target="RFC6481"/> as follows:
        </t>
        <artwork>
<![CDATA[
Filename Extension  RPKI Object       Reference
-------------------------------------------------------------------
       .sig         Signed Checklist  [draft-ietf-sidrops-rpki-rsc]
]]>
        </artwork>
        <t>
          Upon publication of this document, IANA is requested to make this addition permanent and to reference the RFC publication instead of this draft.
        </t>
      </section>

      <section>
        <name>SMI Security for S/MIME Module Identifier (1.2.840.113549.1.9.16.0)</name>
        <t>
          The IANA has permanently allocated for this document in the "SMI Security for S/MIME Module Identifier (1.2.840.113549.1.9.16.0)" registry:
        </t>
        <artwork>
<![CDATA[
Decimal  Description                      References
-----------------------------------------------------------------------
    73   id-mod-rpkiSignedChecklist-2021  [draft-ietf-sidrops-rpki-rsc]
]]>
        </artwork>
        <t>
          Upon publication of this document, IANA is requested to update the "Description" column to read "id-mod-rpkiSignedChecklist-2022", and to reference the RFC publication instead of this draft.
        </t>
      </section>

      <section>
        <name>Media Type</name>
        <t>
          The IANA has registered the media type application/rpki-checklist in the "Provisional Standard Media Type" registry as follows:
        </t>
        <artwork>
<![CDATA[
   Type name: application
   Subtype name: rpki-checklist
   Required parameters: N/A
   Optional parameters: N/A
   Encoding considerations: binary
   Security considerations: Carries an RPKI Signed Checklist
       [RFC-to-be]. This media type contains no active
       content. See Section 5 of [RFC-to-be] for further
       information.
   Interoperability considerations: None
   Published specification: This document.
   Applications that use this media type: RPKI operators.
   Additional information:
     Content: This media type is a signed object, as defined
         in [RFC6488], which contains a payload of a list of
         checksums as defined above in this document.
     Magic number(s): None
     File extension(s): .sig
     Macintosh file type code(s):
   Person & email address to contact for further information:
     Job Snijders <job@fastly.com>
   Intended usage: COMMON
   Restrictions on usage: None
   Author: Job Snijders <job@fastly.com>
   Change controller: IETF
]]>
        </artwork>
        <t>
          Upon publication of this document, IANA is requested to move this registration to the "Media Types" registry and to reference the RFC publication instead of this draft.
        </t>
      </section>

    </section>

  </middle>

  <back>

    <references>
      <name>References</name>

      <references>
        <name>Normative References</name>
        <?rfc include="reference.RFC.2119.xml"?>
        <?rfc include="reference.RFC.3779.xml"?>
        <?rfc include="reference.RFC.5652.xml"?>
        <?rfc include="reference.RFC.6481.xml"?>
        <?rfc include="reference.RFC.6487.xml"?>
        <?rfc include="reference.RFC.6488.xml"?>
        <?rfc include="reference.RFC.7935.xml"?>
        <?rfc include="reference.RFC.8174.xml"?>
        <?rfc include="reference.RFC.9286.xml"?>
        <reference anchor="POSIX" target="https://publications.opengroup.org/standards/unix/c165">
          <front>
            <title>The Open Group's Base Specifications, Issue 7</title>
            <author>
              <organization>IEEE and The Open Group</organization>
            </author>
            <date year="2016"/>
          </front>
        </reference>
      </references>

      <references>
        <name>Informative References</name>
        <?rfc include="reference.IANA.ADDRESS-FAMILY-NUMBERS.xml"?>
        <?rfc include="reference.I-D.ietf-sidrops-rpki-rta.xml"?>
        <?rfc include="reference.RFC.1952.xml"?>
        <?rfc include="reference.RFC.6268.xml"?>
        <?rfc include="reference.RFC.6480.xml"?>
        <?rfc include="reference.RFC.9255.xml"?>
        <reference anchor="signify" target="https://man.openbsd.org/signify">
          <front>
            <title>signify - cryptographically sign and verify files</title>
            <author initials="T." surname="Unangst">
              <organization/>
            </author>
            <author initials="M." surname="Espie">
              <organization/>
            </author>
            <date year="2014" month="May"/>
          </front>
        </reference>
        <reference anchor="rpki-rsc-demo" target="https://github.com/APNIC-net/rpki-rsc-demo">
          <front>
            <title>A proof-of-concept for constructing and validating RPKI Signed Checklists (RSCs).</title>
            <author initials="T." surname="Harrison">
              <organization>APNIC</organization>
            </author>
            <date year="2021" month="February"/>
          </front>
        </reference>
        <reference anchor="rpkimancer" target="https://github.com/benmaddison/rpkimancer">
          <front>
            <title>rpkimancer</title>
            <author initials="B." surname="Maddison">
              <organization>Workonline</organization>
            </author>
            <date year="2021" month="May"/>
          </front>
        </reference>
        <reference anchor="FORT" target="https://github.com/NICMx/FORT-validator">
          <front>
            <title>FORT</title>
            <author surname="FORT Validator">
              <organization>LACNIC and NIC.MX</organization>
            </author>
            <date year="2021" month="May"/>
          </front>
        </reference>
        <reference anchor="prover" target="https://github.com/lolepezy/rpki-prover/pull/126/files">
          <front>
            <title>rpki-prover</title>
            <author initials="M." surname="Puzanov"/>
            <date year="2022" month="september"/>
          </front>
        </reference>
      </references>

    </references>

    <section anchor="acknowledgements">
      <name>Acknowledgements</name>
      <t>
        The authors wish to thank
          George Michaelson,
          Geoff Huston,
          Randy Bush,
          Stephen Kent,
          Matt Lepinski,
          Rob Austein,
          Ted Unangst,
          and Marc Espie
        for prior art.
        The authors thank Russ Housley for reviewing the ASN.1 notation and providing suggestions.
        The authors would like to thank
          Nimrod Levy,
          Tim Bruijnzeels,
          Alberto Leiva,
          Ties de Kock,
          Peter Peele,
          Claudio Jeker,
          Theo Buehler,
          Donald Eastlake,
          Erik Kline,
          Robert Wilton,
          Roman Danyliw,
          Éric Vyncke,
          Lars Eggert,
          Paul Wouters,
          and Murray S. Kucherawy
        for document review and suggestions.
      </t>
    </section>
    <section removeInRFC="true">
      <name>Document changelog</name>

      <section>
        <name>changes from -10 -&gt; -11</name>
        <ul>
          <li>Incorporate feedback from Robert Wilton.</li>
          <li>Incorporate feedback from Roman Danyliw.</li>
          <li>Incorporate feedback from Éric Vyncke.</li>
          <li>Add Mikhail Puzanov's implementation.</li>
          <li>Incorporate feedback from Lars Eggert's review.</li>
          <li>Incorporate feedback from Paul Wouters.</li>
          <li>Incorporate feedback from Murray S. Kucherawy.</li>
        </ul>
      </section>

      <section>
        <name>changes from -09 -&gt; -10</name>
        <ul>
          <li>Incorporate SECDIR feedback.</li>
        </ul>
      </section>

      <section>
        <name>changes from -08 -&gt; -09</name>
        <ul>
          <li>Updated manifests refs to RFC9286</li>
          <li>Added normative ref to RFC6268 (CMS)</li>
          <li>Cleaned up ASN.1 formatting</li>
          <li>Updated ASN.1 module OID following early allocation</li>
          <li>Updated draft-ietf-sidrops-rpki-has-no-identity to RFC9255</li>
          <li>Clean up IANA considerations</li>
        </ul>
      </section>

      <section>
        <name>changes from -07 -&gt; -08</name>
        <ul>
          <li>Theo requested explanation as to why fileName is OPTIONAL</li>
          <li>Russ &amp; Randy requested implementor guidance when RFC3779-generated data fails to decode</li>
          <li>Added uniqueness constraints for fileName and hash contents</li>
          <li>Improved validation and verification procedure description</li>
          <li>Incorporated character-set constraints for fileName in ASN.1 module</li>
        </ul>
      </section>

      <section>
        <name>changes from -06 -&gt; -07</name>
        <ul>
          <li>Change wire format to allow use of commonly deployed libcrypto APIs.</li>
        </ul>
      </section>

      <section>
        <name>changes from -05 -&gt; -06</name>
        <ul>
          <li>Non-content-related updates.</li>
        </ul>
      </section>

      <section>
        <name>changes from -04 -&gt; -05</name>
        <ul>
          <li>Ties contributed clarifications.</li>
        </ul>
      </section>

      <section>
        <name>changes from -03 -&gt; -04</name>
        <ul>
          <li>Alberto pointed out the asID validation also needs to be documented.</li>
        </ul>
      </section>

      <section>
        <name>changes from -02 -&gt; -03</name>
        <ul>
          <li>Reference the IANA assigned OID</li>
          <li>Clarify validation rules</li>
        </ul>
      </section>

      <section>
        <name>changes from -01 -&gt; -02</name>
        <ul>
          <li>Clarify RSC is part of a puzzle, not panacea. Thanks Randy &amp; Russ.</li>
        </ul>
      </section>

      <section>
        <name>changes from -00 -&gt; -01</name>
        <ul>
          <li>Readability improvements</li>
          <li>Update document category to match the registry allocation policy requirement.</li>
        </ul>
      </section>

      <section>
        <name>individual submission phase</name>
        <ul>
          <li>
            On-the-wire change: the 'Filename' switched from 'required' to 'optional'.
            Some SIDROPS Working Group participants proposed a checksum itself is the most minimal information required to address digital objects.
          </li>
        </ul>
      </section>

    </section>

  </back>

</rfc>
